using Pixelbyte.CodeGen;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Template_parser
{
    static class Program
    {
        const string bigT = @"
the list:
    {{foreach item in items}}
    {{tinyTemplate(item)}}
    {{end foreach}}
";

        static void Main()
        {

            const string constTemplate = @"//
//This file was auto-generated by Simplate
//Your changes will be changed. You have been warned...
//
public static class {{ className }}
{
    {{foreach item in items}}
    public const string {{ pascal(item) }} = ""{{ item }}"";
    {{end foreach}}

    Great!
}";

            
            var items = new string[] { "green", "blue", "red", "black", "elvis" };
            var functors = new Functors();
            functors.Add("camel", StringExtensions.ToCamelCase);
            functors.Add("pascal", StringExtensions.ToPascalCase);
            functors.Add("test", Test);
            var para = new Dictionary<string, object>();
            para.Add("items", items);
            para.Add("className", "Tests");

            //Console.WriteLine(tk.GetOutput(para, functors));

            //using (StreamWriter sw = new StreamWriter(@"E:\test.txt"))
            //{
            //    sw.Write(tk.GetOutput(para, functors));
            //}

            //Test a simple constant template
            Simplate ct = Simplate.Compile(constTemplate);
            string ctoutput = ct.GetOutput(para, functors);
            Console.WriteLine(ctoutput);
            Console.WriteLine("----------------------------------");
            //Test using a Template within a template
            //
            functors = new Functors();
            functors.Add("tinyTemplate", TinyTemplate);
            Simplate testNested = Simplate.Compile(bigT);
            string outp = testNested.GetOutput(para, functors);
            Console.WriteLine(outp);
        }

            const string tinyTemplate = @"//TODO: Mojo Here
    {{ item }}
";
        static Simplate tinyTempl;

        public static string TinyTemplate(string input)
        {
            if(tinyTempl == null)
                tinyTempl = Simplate.Compile(tinyTemplate);

            var para = new Dictionary<string, object>() { { "item", input } };
            return tinyTempl.GetOutput(para, null);
        }

        public static string Test(string input)
        {
            return input + "-+=";
        }
    }
}
